#ifndef __TYPE_GAME_BOX__
#define __TYPE_GAME_BOX__

#include "t_defs.h"
#include "t_res.h"
#include "t_mes.h"

#include <binfile.h>

/////////////////////////////////////////////////////////////////////////////
//////Создание коробки
/////////////////////////////////////////////////////////////////////////////
struct   CreateGameBox
{
  int   count;
};

/////////////////////////////////////////////////////////////////////////////
/////Таг для сохранения GameBox
/////////////////////////////////////////////////////////////////////////////
struct    GameBoxTag
{
  int   count;
  int   max;
};

//////////////////////Сообщения коробке (для потомков)///////////////////////

enum    GameBoxMessagesId
{
  GET_STORE = GAME_BOX_LIMIT,
  SET_STORE,
  STORE_STATE
};

/////////////////////////////////////////////////////////////////////////////
/////Запрос на колличество патронов
/////////////////////////////////////////////////////////////////////////////
struct  GetBoxStoreMessage: public GameMessage
{
        GetBoxStoreMessage (ID cb):object (cb)   { id = GET_STORE; }

        ID      object;
};

/////////////////////////////////////////////////////////////////////////////
////Call-back на запрос о колличестве патронов
/////////////////////////////////////////////////////////////////////////////
struct  BoxStoreStateMessage: public GameMessage
{
        BoxStoreStateMessage (int x): store (x) { id = STORE_STATE; }

        int     store;
};


/////////////////////////////////////////////////////////////////////////////
/////Установка колличсества патронов
/////////////////////////////////////////////////////////////////////////////
struct  SetBoxStoreMessage : public GameMessage
{
        SetBoxStoreMessage (int x): store (x) { id = SET_STORE; }

        int     store;
};

#endif